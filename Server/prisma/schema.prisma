generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String          @id @default(uuid())
  name         String?
  email        String?         @unique
  contact      String?
  password     String?
  roleId       String?
  block        String?
  district     String?
  state        String?
  isActive     Boolean?
  refreshToken String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @default(now()) @updatedAt
  services     ServiceRecord[]
  stocks       StockMovement[]
  role         Role?           @relation(fields: [roleId], references: [id])

  @@index([roleId], map: "User_roleId_fkey")
}

model Role {
  id        String   @id @default(uuid())
  name      String?  @unique
  createdAt DateTime @default(now())
  users     User[]
}

model Warehouse {
  id             String          @id @default(uuid())
  name           String?         @unique
  state          String?
  createdAt      DateTime        @default(now())
  stockMovements StockMovement[]
}

model Item {
  id                 String               @id @default(uuid())
  name               String?              @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  rawMaterials       ItemRawMaterial[]
  manufacturingUsage ManufacturingUsage[]
  serviceRecords     ServiceRecord[]
}

model RawMaterial {
  id                  String               @id @default(uuid())
  name                String?              @unique
  stock               Float?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  ItemRawMaterial     ItemRawMaterial[]
  manufacturingUsages ManufacturingUsage[]
  serviceUsages       ServiceUsage[]
  stockMovements      StockMovement[]
}

model ItemRawMaterial {
  id            String       @id @default(uuid())
  itemId        String?
  rawMaterialId String?
  quantity      Float?
  item          Item?        @relation(fields: [itemId], references: [id])
  rawMaterial   RawMaterial? @relation(fields: [rawMaterialId], references: [id])

  @@unique([itemId, rawMaterialId])
  @@index([rawMaterialId], map: "ItemRawMaterial_rawMaterialId_fkey")
}

model StockMovement {
  id            String       @id @default(uuid())
  rawMaterialId String?
  userId        String?
  warehouseId   String?
  quantity      Float?
  type          String?
  timestamp     DateTime     @default(now())
  rawMaterial   RawMaterial? @relation(fields: [rawMaterialId], references: [id])
  warehouse     Warehouse?   @relation(fields: [warehouseId], references: [id])
  user          User?        @relation(fields: [userId], references: [id])

  @@index([rawMaterialId], map: "StockMovement_rawMaterialId_fkey")
  @@index([warehouseId], map: "StockMovement_warehouseId_fkey")
}

model ManufacturingUsage {
  id                String       @id @default(uuid())
  itemId            String?
  rawMaterialId     String?
  quantityUsed      Float?
  manufacturingDate DateTime     @default(now())
  item              Item?        @relation(fields: [itemId], references: [id])
  rawMaterial       RawMaterial? @relation(fields: [rawMaterialId], references: [id])

  @@index([itemId], map: "ManufacturingUsage_itemId_fkey")
  @@index([rawMaterialId], map: "ManufacturingUsage_rawMaterialId_fkey")
}

model ServiceRecord {
  id            String         @id @default(uuid())
  itemId        String?
  userId        String?
  repairedBy    String?
  servicedAt    DateTime       @default(now())
  status        String?
  remark        String?
  item          Item?          @relation(fields: [itemId], references: [id])
  user          User?          @relation(fields: [userId], references: [id])
  serviceUsages ServiceUsage[]

  @@index([itemId], map: "ServiceRecord_itemId_fkey")
  @@index([userId], map: "ServiceRecord_userId_fkey")
}

model ServiceUsage {
  id            String         @id @default(uuid())
  serviceId     String?
  rawMaterialId String?
  quantityUsed  Float?
  rawMaterial   RawMaterial?   @relation(fields: [rawMaterialId], references: [id])
  service       ServiceRecord? @relation(fields: [serviceId], references: [id])

  @@index([rawMaterialId], map: "ServiceUsage_rawMaterialId_fkey")
  @@index([serviceId], map: "ServiceUsage_serviceId_fkey")
}

model Test {
  id   String  @id @default(uuid())
  name String?
}
