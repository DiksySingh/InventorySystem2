generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String          @id @default(uuid())
  name         String?
  email        String?         @unique
  contact      String?
  password     String?
  roleId       String?
  block        String?
  district     String?
  state        String?
  isActive     Boolean?
  refreshToken String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @default(now()) @updatedAt
  stocks       StockMovement[]
  services     ServiceRecord[] // One-to-Many relationship with ServiceRecord
  role         Role?           @relation(fields: [roleId], references: [id])

  @@index([roleId], map: "User_roleId_fkey")
}

model Role {
  id        String   @id @default(uuid())
  name      String?  @unique
  createdAt DateTime @default(now())
  users     User[]
}

model Warehouse {
  id             String          @id @default(uuid())
  name           String?         @unique
  state          String?
  createdAt      DateTime        @default(now())
  stockMovements StockMovement[]
}

model Item {
  id                 String               @id @default(uuid())
  name               String?              @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  rawMaterials       ItemRawMaterial[]
  manufacturingUsage ManufacturingUsage[]
}

model RawMaterial {
  id                  String               @id @default(uuid())
  name                String?              @unique
  stock               Float?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  ItemRawMaterial     ItemRawMaterial[]
  manufacturingUsages ManufacturingUsage[]
  serviceUsages       ServiceUsage[]
  stockMovements      StockMovement[]
}

model ItemRawMaterial {
  id            String       @id @default(uuid())
  itemId        String?
  rawMaterialId String?
  quantity      Float?
  item          Item?        @relation(fields: [itemId], references: [id])
  rawMaterial   RawMaterial? @relation(fields: [rawMaterialId], references: [id])

  @@unique([itemId, rawMaterialId])
  @@index([rawMaterialId], map: "ItemRawMaterial_rawMaterialId_fkey")
}

model StockMovement {
  id            String       @id @default(uuid())
  rawMaterialId String?
  userId        String?
  warehouseId   String?
  quantity      Float?
  type          String?
  timestamp     DateTime     @default(now())
  rawMaterial   RawMaterial? @relation(fields: [rawMaterialId], references: [id])
  warehouse     Warehouse?   @relation(fields: [warehouseId], references: [id])
  user          User?        @relation(fields: [userId], references: [id])

  @@index([rawMaterialId], map: "StockMovement_rawMaterialId_fkey")
  @@index([warehouseId], map: "StockMovement_warehouseId_fkey")
}

model ManufacturingUsage {
  id                String       @id @default(uuid())
  itemId            String?
  rawMaterialId     String?
  quantityUsed      Float?
  manufacturingDate DateTime     @default(now())
  item              Item?        @relation(fields: [itemId], references: [id])
  rawMaterial       RawMaterial? @relation(fields: [rawMaterialId], references: [id])

  @@index([itemId], map: "ManufacturingUsage_itemId_fkey")
  @@index([rawMaterialId], map: "ManufacturingUsage_rawMaterialId_fkey")
}

model ServiceRecord {
  id              String         @id @default(uuid()) // Unique Service Record ID
  item            String?        // Main item being repaired (e.g., motor)  //Motor
  subItem         String?        // Sub-item (e.g., capacitor, fuse) //MOTOR 10HP AC 380V
  quantity        Float?         // Quantity of items handled    //1
  serialNumber    String?        // Serial number of the serviced item //ABCB1234
  faultAnalysis   String?        // Description of the fault or issue found  //Stamp Damaged
  isRepaired      Boolean?           // Whether the main item was fixed //true
  repairedRejectedBy      String?        // Name of the technician //Shiv
  remarks         String?        // Additional repair notes // Deffective Items
  repairedParts   Json?          // Array of objects: [{ rawMaterialId: "123", quantity: 2 }]

  userId          String         // User who created the record (foreign key)
  user            User           @relation(fields: [userId], references: [id])  // Relationship to User model

  servicedAt      DateTime       @default(now())                           // Service date
  updatedAt       DateTime       @updatedAt                                // Automatically updated timestamp
  
  serviceUsages   ServiceUsage[]                                           // Relationship to parts usage

  @@index([serialNumber], map: "ServiceRecord_serialNumber_idx")           // Index on serialNumber for fast lookups
  @@index([userId], map: "ServiceRecord_userId_idx")                       // Index on userId for efficient queries
}

model ServiceUsage {
  id            String         @id @default(uuid())               // Unique ID
  serviceId     String         // Foreign key to ServiceRecord (One-to-Many)
  rawMaterialId String?        // Material/part used
  quantityUsed  Float?         // Quantity used in this service
  // isRepaired    Boolean?       // Indicates if the part was repaired/replaced
  // remarks       String?        // Additional notes for this part usage

  // Relationships
  rawMaterial   RawMaterial?   @relation(fields: [rawMaterialId], references: [id]) // Part reference
  service       ServiceRecord?  @relation(fields: [serviceId], references: [id])    // Linked service record

  // Timestamps
  createdAt     DateTime       @default(now())                     // Record creation time
  updatedAt     DateTime       @updatedAt                         // Last modification time

  @@index([serviceId], map: "ServiceUsage_serviceId_fkey")        // Index for service lookups
  @@index([rawMaterialId], map: "ServiceUsage_rawMaterialId_fkey")// Index for material lookups
}

